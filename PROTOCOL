==== BEFORE GAME START ====

=== Connection and waiting phase ===

When the client connects, he first sends the magic word (0xXX) and protocol version (0x01).

Client> 0xXX 0x01

The server then sends back the two bytes:

Server> 0xXX 0x01

It then proceed to send information about the game:

Server> Game

At this point, the server considers that the client is fully connected and waiting for a game. Every time the number of currently connected clients (n_clients) changes the server sends its new value to *every* connected client:

Server> n_clients (uint32)

= Example =

S wait for connections. A connects and gets:

Server>A 0xXX 0x01 1024 768 2 1

For there are currently one connected client (A). Then, B too connects to S and the servers sends:

Server>B 0xXX 0x01 1024 768 2 2
Server>A 2

In other words, the server send the new number of currently connected clients to both A and B.



=== Initialization phase ===

When n_clients reaches n_slots, the game is settled and the server sends to each client the initial state of its robot:

Server> Robot (sea Robot information)

When the game is ready to start, the server sends the start message (0x42) to every client:

Server> 0x42

From now on, the servers only sends data for in-game events concerning the client, and the clients only sends data for client's robot orders.




==== ORDERS ====

An order is a message which is sent by a robot to the server whenever he wants. Currently, every order takes exactly one 4-byte (float) parameter. Here is a list of order codes:

ADVANCE 0x01
TURN    0x02
TURNGUN 0x03
FIRE    0x04


== Moves ==

The movement orders are ADVANCE (0x01), TURN (0x02) and TURNGUN (0x03). They actually sets the (may be negative) at which the robot moves forward, turn to the right, or turn its gun to the right. The parameter is the desired speed.

Client> COMMAND
Client> speed   (float)


== FIRE (0x04) ==

This makes the robot to fire a bullet of energy immediatly. The parameter is the desired amount of energy in the bullet:

Client> 0x04
Client> energy (float)




==== EVENTS ====

An events is a message which is sent by the server to both the display and the concerned robots, at some moment in the simulation. Here is a list of event codes:

TICK     0x01
DUMP     0x02
SPOT     0x03
BULLET   0x04
HIT      0x05
HITBY    0x06
HITROBOT 0x07
HITWALL  0x08
KABOUM   0x09

Except for TICK, DUMP and KABOUM, when the server sends the display event information, it first sends the identifier of the robot which produced the event. It is to say:

Server> event_code  (uint8)
Server> robot_id    (uint8)
Server> event_param (?)

In the following descriptions, the second line will be omitted (as if it were robot communication).


== TICK (0x01) ==
Robots: all active

A tick is the atomic unit of time in a game. At every tick, the server broadcast a tick event:

Server> 0x01

== DUMP (0x02) ==
Robots: none (but Chuck Norris's one)

When the server thinks the display should get a new dump of the game's data, it send everything to it:

Server> 0x02
Server> Game
Server> n_robots  (uint32)
Server> Robot     (n_robots items) (see Robot information)
Server> n_bullets (uint32)
Server> Bullet    (n_bullet items) (see Bullet information)

where 'n_robots' (respectively 'n_bullets') is the total number of active robots (bullets) still in the game.


== SPOT (0x03) ==
Robots: the robot which spotted his foe

Whenever another robot is in sight, the client gets the event:

Server> 0x03
Server> Robot (see Robot information)


== BULLET (0x04) ==
Robots: the robot which spotted the threat

Whenever a bullet is in sight (even if not in one's direction), one gets:

Server> 0x04
Server> Bullet (see Bullet information)


== HIT (0x05) ==
Robots: the robot which fired the hitting bullet

Whenever bullet fired by the robot hits a target, the folowing event occurs:

Server> 0x05
Server> robot_id (uint32)

where 'robot_id' is the identifier of the robot which was hit.


== HITBY (0x06) ==
Robots: the robot the bullet hit

Whenever the robot is hit by a bullet, it gets:

Server> 0x06
Server> robot_id (uint32)

where 'robot_id' is the identifier of the robot which fired the bullet.


== HITROBOT (0x07) ==
Robots: the robots which were involved in the collision

Whenever two robots collide, each gets the following information:

Server> 0x07
Server> robot_id (uint32)

where 'robot_id' is the identifier of the other robot involved.


== HITWALL (0x08) ==
Robots: the clumsy robot

Whenever a robot tries to get out of the map and is stopped by basic physics, it gets:

Server> 0x08

== KABOUM (0x09) ==
Robots: all active and the kaboum'ed one

Whenever a robot runs out of life and explode, every robot feels the disturbance in the Force and gets the last state of the gone robot:

Server> 0x09
Server> Robot (see Robot information)




==== GENERIC DATA TRANSFERS ====

== Game information ==

General information about the game are sent following the scheme:

> width     (float)
> height    (float)
> n_slots   (uint32)
> n_clients (uint32)


== Robot information ==

When a robot's data need to be sent, the following scheme is used:

> id           (uint32)
> x            (float)
> y            (float)
> width        (float)
> height       (float)
> angle        (float)
> gunAngle     (float)
> energy       (float)
> velocity     (float)
> turnSpeed    (float)
> turnGunSpeed (float)

where 'id' MUST be an uniq identifier for the robot on the server's instance.


== Bullet information ==

When a bullet's data need to be sent, the following scheme is used:

> from   (uint32)
> x      (float)
> y      (float)
> angle  (float)
> energy (float)

where 'from' MUST be the identifier of the robot which sent the bullet.
